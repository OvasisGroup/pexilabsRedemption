"""
Django settings for pexilabs project.

Generated by 'django-admin startproject' using Django 4.2.23.

For # REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',  # Use default schema instead of spectacular
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}mation on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-_8-^e_9e42f-yh!ca7g71jbr%q-5q)#908waj-ue#()pn)i)gs')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'testserver,localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'import_export',
    # 'rest_framework_simplejwt',
    # 'corsheaders',
    # 'drf_spectacular',  # Temporarily commented out
    # 'django_filters',
    'authentication',
    'transactions',  # Re-enabled
    # 'integrations',  # Temporarily disabled due to cryptography import
    'payments',  # Payment processing app
    'checkout',  # Checkout page app
    'widget_tweaks',
]

MIDDLEWARE = [
    # 'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pexilabs.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
            BASE_DIR / 'authentication' / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pexilabs.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.sqlite3'),
        'NAME': os.getenv('DB_NAME', BASE_DIR / 'db.sqlite3'),
        'USER': os.getenv('DB_USER', ''),
        'PASSWORD': os.getenv('DB_PASSWORD', ''),
        'HOST': os.getenv('DB_HOST', ''),
        'PORT': os.getenv('DB_PORT', ''),
    }
}


# Custom User Model
AUTH_USER_MODEL = 'authentication.CustomUser'

# Authentication Backends
AUTHENTICATION_BACKENDS = [
    'authentication.backends.EmailBackend',
    'authentication.backends.PhoneBackend',
    'django.contrib.auth.backends.ModelBackend',
]


# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': None,  # Disable schema generation since drf_spectacular is not available
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
}


# API Documentation Configuration (Swagger/OpenAPI)
SPECTACULAR_SETTINGS = {
    'TITLE': 'PexiLabs API',
    'DESCRIPTION': 'Comprehensive API for user authentication, merchant onboarding, and OTP verification system',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'CONTACT': {
        'name': 'PexiLabs Development Team',
        'email': 'dev@pexilabs.com',
    },
    'LICENSE': {
        'name': 'MIT License',
    },
    'SERVERS': [
        {
            'url': 'http://127.0.0.1:8000',
            'description': 'Development Server',
        },
        {
            'url': 'https://api.pexilabs.com',
            'description': 'Production Server',
        },
    ],
    'TAGS': [
        {
            'name': 'Authentication',
            'description': 'User registration, login, logout, and profile management',
        },
        {
            'name': 'OTP Verification',
            'description': 'Email OTP generation, verification, and resend functionality',
        },
        {
            'name': 'Merchant Management',
            'description': 'Merchant account creation, management, and status updates',
        },
        {
            'name': 'User Management',
            'description': 'User profile, sessions, and role management',
        },
        {
            'name': 'Reference Data',
            'description': 'Countries, currencies, and merchant categories',
        },
    ],
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'displayRequestDuration': True,
        'docExpansion': 'none',
        'filter': True,
        'showExtensions': True,
        'showCommonExtensions': True,
        'tryItOutEnabled': True,
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'hideHostname': False,
        'hideLoading': False,
        'hideSchemaPattern': True,
        'expandResponses': '200,201',
        'pathInMiddlePanel': True,
        'scrollYOffset': 0,
        'theme': {
            'colors': {
                'primary': {
                    'main': '#3f51b5',
                },
            },
        },
    },
    'AUTHENTICATION_WHITELIST': [
        'drf_spectacular.authentication.SessionScheme',
    ],
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization',
            'description': 'JWT token obtained from login endpoint. Format: Bearer <token>',
        }
    },
    'SECURITY': [{'Bearer': []}],
    'APPEND_COMPONENTS': {
        'securitySchemes': {
            'Bearer': {
                'type': 'http',
                'scheme': 'bearer',
                'bearerFormat': 'JWT',
                'description': 'JWT token authentication. Get your token from the login endpoint.',
            }
        }
    },
}


# JWT Configuration

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    'JTI_CLAIM': 'jti',
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}


# CORS Configuration
CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000,http://127.0.0.1:3000,http://localhost:8080,http://127.0.0.1:8080').split(',')

CORS_ALLOW_CREDENTIALS = os.getenv('CORS_ALLOW_CREDENTIALS', 'True').lower() == 'true'

CORS_ALLOW_ALL_ORIGINS = os.getenv('CORS_ALLOW_ALL_ORIGINS', str(DEBUG)).lower() == 'true'  # Only allow all origins in development


# # Email Configuration
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'ayaraerick@gmail.com'
# EMAIL_HOST_PASSWORD = 'wzcj uebn hykn sjwa'  # Gmail App Password (not regular password)
# DEFAULT_FROM_EMAIL = 'ayaraerick@gmail.com'

# Email Configuration (Zoho Mail)
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', 'smtp.zoho.com')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', '587'))
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', 'info@pexipay.com')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', 'EMAbNtLjkuy2')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'info@pexipay.com')
SERVER_EMAIL = os.getenv('SERVER_EMAIL', 'info@pexipay.com')
EMAIL_TIMEOUT = int(os.getenv('EMAIL_TIMEOUT', '60'))
EMAIL_DEBUG = os.getenv('EMAIL_DEBUG', 'True').lower() == 'true' 

# Additional settings
X_FRAME_OPTIONS = os.getenv('X_FRAME_OPTIONS', 'DENY')

# Session Configuration
SESSION_COOKIE_AGE = int(os.getenv('SESSION_COOKIE_AGE', '1209600'))  # 2 weeks
SESSION_COOKIE_SECURE = os.getenv('SESSION_COOKIE_SECURE', str(not DEBUG)).lower() == 'true'
SESSION_COOKIE_HTTPONLY = os.getenv('SESSION_COOKIE_HTTPONLY', 'True').lower() == 'true'
SESSION_COOKIE_SAMESITE = os.getenv('SESSION_COOKIE_SAMESITE', 'Lax')


# Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 8,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = os.getenv('LANGUAGE_CODE', 'en-us')

TIME_ZONE = os.getenv('TIME_ZONE', 'UTC')

USE_I18N = os.getenv('USE_I18N', 'True').lower() == 'true'

USE_TZ = os.getenv('USE_TZ', 'True').lower() == 'true'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = os.getenv('STATIC_URL', 'static/')
STATIC_ROOT = BASE_DIR / os.getenv('STATIC_ROOT', 'staticfiles')

# Media files (user uploads)
MEDIA_URL = os.getenv('MEDIA_URL', 'media/')
MEDIA_ROOT = BASE_DIR / os.getenv('MEDIA_ROOT', 'media')

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = int(os.getenv('FILE_UPLOAD_MAX_MEMORY_SIZE', str(10 * 1024 * 1024)))  # 10MB
DATA_UPLOAD_MAX_MEMORY_SIZE = int(os.getenv('DATA_UPLOAD_MAX_MEMORY_SIZE', str(10 * 1024 * 1024)))  # 10MB
FILE_UPLOAD_PERMISSIONS = int(os.getenv('FILE_UPLOAD_PERMISSIONS', '0o644'), 8)

# Security settings for file uploads
SECURE_FILE_UPLOADS = os.getenv('SECURE_FILE_UPLOADS', 'True').lower() == 'true'
ALLOWED_FILE_EXTENSIONS = os.getenv('ALLOWED_FILE_EXTENSIONS', '.pdf,.jpg,.jpeg,.png,.doc,.docx').split(',')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Encryption settings for sensitive data
# Generate encryption key for development (use environment variable in production)
ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY', 'ZmDfcTF7_60GrrY167zsiPd67pEvs0aGOv2oasOM1Pg=')  # This is base64 encoded

# =============================================================================
# INTEGRATION SETTINGS
# =============================================================================

# UBA Bank Integration Configuration
UBA_BASE_URL = os.getenv('UBA_BASE_URL', 'https://api-sandbox.ubakenya-pay.com')
UBA_ACCESS_TOKEN = os.getenv('UBA_ACCESS_TOKEN', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZGM2OTJlYzRkNDNjZWRmYmUzODNhZCIsIm1ldGEiOm51bGwsImlhdCI6MTc0MjQ5ODA5NH0.zhhV3tWp6DwvpLsBTXi4B9qUztbHw_ZLepYEiuHVBRE')
UBA_CONFIGURATION_TEMPLATE_ID = os.getenv('UBA_CONFIGURATION_TEMPLATE_ID', '67dc6492c77feba890450b44')
UBA_CUSTOMIZATION_TEMPLATE_ID = os.getenv('UBA_CUSTOMIZATION_TEMPLATE_ID', '67e1857d419c65d3259ab827')
UBA_WEBHOOK_SECRET = os.getenv('UBA_WEBHOOK_SECRET', 'uba_webhook_secret_key_here')
UBA_TIMEOUT_SECONDS = int(os.getenv('UBA_TIMEOUT_SECONDS', '30'))
UBA_RETRY_COUNT = int(os.getenv('UBA_RETRY_COUNT', '3'))
UBA_RATE_LIMIT_PER_MINUTE = int(os.getenv('UBA_RATE_LIMIT_PER_MINUTE', '60'))
UBA_SANDBOX_MODE = os.getenv('UBA_SANDBOX_MODE', 'True').lower() == 'true'

# CyberSource Payment Gateway Configuration
CYBERSOURCE_MERCHANT_ID = os.getenv('CYBERSOURCE_MERCHANT_ID', 'e6d04dd3-6695-4ab2-a8a8-78cadaac9108')
CYBERSOURCE_SHARED_SECRET = os.getenv('CYBERSOURCE_SHARED_SECRET', '7QruQKZ56AXtBe1kZXFN9tYzd7SjUFE3rEHoH88NvlU=')
CYBERSOURCE_API_KEY = os.getenv('CYBERSOURCE_API_KEY', 'demo_cybersource_api_key')
CYBERSOURCE_BASE_URL = os.getenv('CYBERSOURCE_BASE_URL', 'https://apitest.cybersource.com')
CYBERSOURCE_WEBHOOK_SECRET = os.getenv('CYBERSOURCE_WEBHOOK_SECRET', 'cybersource_webhook_secret')
CYBERSOURCE_TIMEOUT_SECONDS = int(os.getenv('CYBERSOURCE_TIMEOUT_SECONDS', '30'))
CYBERSOURCE_RETRY_COUNT = int(os.getenv('CYBERSOURCE_RETRY_COUNT', '3'))
CYBERSOURCE_RATE_LIMIT_PER_MINUTE = int(os.getenv('CYBERSOURCE_RATE_LIMIT_PER_MINUTE', '1000'))
CYBERSOURCE_SANDBOX_MODE = os.getenv('CYBERSOURCE_SANDBOX_MODE', 'True').lower() == 'true'

# Corefy Payment Orchestration Configuration
COREFY_API_KEY = os.getenv('COREFY_API_KEY', 'demo_corefy_api_key_here')
COREFY_SECRET_KEY = os.getenv('COREFY_SECRET_KEY', 'demo_corefy_secret_key_here')
COREFY_CLIENT_KEY = os.getenv('COREFY_CLIENT_KEY', 'demo_corefy_client_key_here')
COREFY_BASE_URL = os.getenv('COREFY_BASE_URL', 'https://api.sandbox.corefy.com')
COREFY_WEBHOOK_SECRET = os.getenv('COREFY_WEBHOOK_SECRET', 'corefy_webhook_secret_key_here')
COREFY_TIMEOUT_SECONDS = int(os.getenv('COREFY_TIMEOUT_SECONDS', '30'))
COREFY_RETRY_COUNT = int(os.getenv('COREFY_RETRY_COUNT', '3'))
COREFY_RATE_LIMIT_PER_MINUTE = int(os.getenv('COREFY_RATE_LIMIT_PER_MINUTE', '600'))
COREFY_SANDBOX_MODE = os.getenv('COREFY_SANDBOX_MODE', 'True').lower() == 'true'

# Integration Feature Flags
ENABLE_UBA_INTEGRATION = os.getenv('ENABLE_UBA_INTEGRATION', 'True').lower() == 'true'
ENABLE_CYBERSOURCE_INTEGRATION = os.getenv('ENABLE_CYBERSOURCE_INTEGRATION', 'True').lower() == 'true'
ENABLE_COREFY_INTEGRATION = os.getenv('COREFY_INTEGRATION', 'True').lower() == 'true'

# Global Integration Settings
INTEGRATION_HEALTH_CHECK_INTERVAL = int(os.getenv('INTEGRATION_HEALTH_CHECK_INTERVAL', '300'))  # seconds
INTEGRATION_LOG_REQUESTS = os.getenv('INTEGRATION_LOG_REQUESTS', 'True').lower() == 'true'
INTEGRATION_LOG_RESPONSES = os.getenv('INTEGRATION_LOG_RESPONSES', 'True').lower() == 'true'

# Authentication URLs
LOGIN_URL = os.getenv('LOGIN_URL', '/')
LOGOUT_URL = os.getenv('LOGOUT_URL', '/auth/logout/')
LOGIN_REDIRECT_URL = os.getenv('LOGIN_REDIRECT_URL', '/dashboard/')
LOGOUT_REDIRECT_URL = os.getenv('LOGOUT_REDIRECT_URL', '/')
