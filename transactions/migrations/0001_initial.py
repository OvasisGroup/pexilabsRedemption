# Generated by Django 4.2.23 on 2025-07-04 06:23

from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('authentication', '0007_add_app_key_generation_module'),
    ]

    operations = [
        migrations.CreateModel(
            name='PaymentGateway',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Gateway name', max_length=100, unique=True)),
                ('code', models.CharField(help_text='Gateway code identifier', max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('api_endpoint', models.URLField(help_text='Gateway API endpoint')),
                ('webhook_endpoint', models.URLField(blank=True, help_text='Webhook endpoint for notifications')),
                ('public_key', models.TextField(blank=True, help_text='Public API key')),
                ('private_key', models.TextField(blank=True, help_text='Private API key (encrypted)')),
                ('merchant_id', models.CharField(blank=True, help_text='Merchant ID with gateway', max_length=100)),
                ('supports_payments', models.BooleanField(default=True)),
                ('supports_refunds', models.BooleanField(default=True)),
                ('supports_payouts', models.BooleanField(default=False)),
                ('supports_webhooks', models.BooleanField(default=True)),
                ('supports_recurring', models.BooleanField(default=False)),
                ('supported_payment_methods', models.TextField(default='card,bank_transfer', help_text='Comma-separated list of supported payment methods')),
                ('supported_currencies', models.TextField(default='USD,EUR,GBP', help_text='Comma-separated list of supported currency codes')),
                ('min_amount', models.DecimalField(decimal_places=2, default=Decimal('0.01'), help_text='Minimum transaction amount', max_digits=15)),
                ('max_amount', models.DecimalField(decimal_places=2, default=Decimal('100000.00'), help_text='Maximum transaction amount', max_digits=15)),
                ('transaction_fee_percentage', models.DecimalField(decimal_places=4, default=Decimal('0.0290'), help_text='Transaction fee percentage (e.g., 2.9% = 0.0290)', max_digits=5)),
                ('transaction_fee_fixed', models.DecimalField(decimal_places=2, default=Decimal('0.30'), help_text='Fixed transaction fee amount', max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_sandbox', models.BooleanField(default=False, help_text='Whether this is a sandbox/test gateway')),
                ('priority', models.PositiveIntegerField(default=1, help_text='Gateway priority (lower = higher priority)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Payment Gateway',
                'verbose_name_plural': 'Payment Gateways',
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('reference', models.CharField(help_text='Unique transaction reference', max_length=100, unique=True)),
                ('external_reference', models.CharField(blank=True, help_text='External system reference (e.g., gateway transaction ID)', max_length=255)),
                ('customer_email', models.EmailField(blank=True, help_text='Customer email for guest transactions', max_length=254)),
                ('customer_phone', models.CharField(blank=True, help_text='Customer phone number', max_length=20)),
                ('transaction_type', models.CharField(choices=[('payment', 'Payment'), ('refund', 'Refund'), ('payout', 'Payout'), ('transfer', 'Transfer'), ('fee', 'Fee'), ('reversal', 'Reversal'), ('chargeback', 'Chargeback'), ('adjustment', 'Adjustment')], default='payment', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded'), ('disputed', 'Disputed'), ('frozen', 'Frozen')], default='pending', max_length=20)),
                ('payment_method', models.CharField(choices=[('bank_transfer', 'Bank Transfer'), ('card', 'Card Payment'), ('mobile_money', 'Mobile Money'), ('wallet', 'Digital Wallet'), ('crypto', 'Cryptocurrency'), ('cash', 'Cash'), ('other', 'Other')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, help_text='Transaction amount', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('fee_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Transaction fee amount', max_digits=15)),
                ('net_amount', models.DecimalField(decimal_places=2, help_text='Net amount after fees', max_digits=15)),
                ('original_currency', models.CharField(blank=True, help_text='Original currency if converted', max_length=3)),
                ('original_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Original amount before currency conversion', max_digits=15, null=True)),
                ('exchange_rate', models.DecimalField(blank=True, decimal_places=6, help_text='Exchange rate used for conversion', max_digits=10, null=True)),
                ('description', models.TextField(blank=True, help_text='Transaction description')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional transaction metadata')),
                ('payment_details', models.JSONField(blank=True, default=dict, help_text='Payment-specific details (card last 4, bank details, etc.)')),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('failure_reason', models.TextField(blank=True)),
                ('failure_code', models.CharField(blank=True, max_length=50)),
                ('settlement_date', models.DateField(blank=True, null=True)),
                ('settlement_reference', models.CharField(blank=True, max_length=100)),
                ('is_settled', models.BooleanField(default=False)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('risk_score', models.PositiveIntegerField(blank=True, help_text='Risk score from 0-100', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_flagged', models.BooleanField(default=False, help_text='Flagged for manual review')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='transactions', to='authentication.preferredcurrency')),
                ('customer', models.ForeignKey(blank=True, help_text='Customer making the payment (optional for guest payments)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to=settings.AUTH_USER_MODEL)),
                ('gateway', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transactions', to='transactions.paymentgateway')),
                ('merchant', models.ForeignKey(help_text='Merchant processing the transaction', on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='authentication.merchant')),
                ('parent_transaction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_transactions', to='transactions.transaction')),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Webhook',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('url', models.URLField(help_text='Webhook delivery URL')),
                ('event_type', models.CharField(help_text='Event that triggered the webhook', max_length=50)),
                ('payload', models.JSONField(help_text='Webhook payload sent')),
                ('headers', models.JSONField(default=dict, help_text='Headers sent with the webhook')),
                ('status_code', models.PositiveIntegerField(blank=True, null=True)),
                ('response_body', models.TextField(blank=True)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('attempts', models.PositiveIntegerField(default=0)),
                ('max_attempts', models.PositiveIntegerField(default=3)),
                ('is_delivered', models.BooleanField(default=False)),
                ('delivered_at', models.DateTimeField(blank=True, null=True)),
                ('next_attempt_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhooks', to='transactions.transaction')),
            ],
            options={
                'verbose_name': 'Webhook',
                'verbose_name_plural': 'Webhooks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TransactionEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(help_text='Type of event (status_change, webhook_received, etc.)', max_length=50)),
                ('old_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded'), ('disputed', 'Disputed'), ('frozen', 'Frozen')], max_length=20)),
                ('new_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('expired', 'Expired'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded'), ('disputed', 'Disputed'), ('frozen', 'Frozen')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('source', models.CharField(default='system', help_text='Source of the event (system, gateway, admin, etc.)', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('transaction', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='transactions.transaction')),
                ('user', models.ForeignKey(blank=True, help_text='User who triggered the event (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction Event',
                'verbose_name_plural': 'Transaction Events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentLink',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Payment link title', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Payment description')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Payment amount', max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('is_amount_flexible', models.BooleanField(default=False, help_text='Allow customers to change the amount')),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum amount (if flexible)', max_digits=15, null=True)),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum amount (if flexible)', max_digits=15, null=True)),
                ('slug', models.CharField(help_text='Unique slug for the payment link', max_length=100, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('expires_at', models.DateTimeField(blank=True, help_text='When this payment link expires', null=True)),
                ('max_uses', models.PositiveIntegerField(blank=True, help_text='Maximum number of times this link can be used', null=True)),
                ('current_uses', models.PositiveIntegerField(default=0)),
                ('require_name', models.BooleanField(default=True)),
                ('require_email', models.BooleanField(default=True)),
                ('require_phone', models.BooleanField(default=False)),
                ('require_address', models.BooleanField(default=False)),
                ('allowed_payment_methods', models.TextField(default='card,bank_transfer', help_text='Comma-separated list of allowed payment methods')),
                ('success_url', models.URLField(blank=True, help_text='URL to redirect after successful payment')),
                ('cancel_url', models.URLField(blank=True, help_text='URL to redirect after cancelled payment')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payment_links', to='authentication.preferredcurrency')),
                ('merchant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_links', to='authentication.merchant')),
            ],
            options={
                'verbose_name': 'Payment Link',
                'verbose_name_plural': 'Payment Links',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['reference'], name='transaction_referen_923a88_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['external_reference'], name='transaction_externa_6c3fd2_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['merchant', 'status'], name='transaction_merchan_78c472_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['customer', 'status'], name='transaction_custome_9f3449_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['status', 'created_at'], name='transaction_status_d2f80b_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['gateway', 'status'], name='transaction_gateway_a33fc0_idx'),
        ),
        migrations.AddIndex(
            model_name='transaction',
            index=models.Index(fields=['settlement_date'], name='transaction_settlem_b86b4f_idx'),
        ),
    ]
